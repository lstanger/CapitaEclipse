CLASS zcl_ps_cats_project_manager DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
    CLASS-METHODS get_instance
      RETURNING VALUE(ro_instance) TYPE REF TO zcl_ps_cats_project_manager.

    METHODS: get_project_managers
      IMPORTING
        io_request TYPE REF TO if_rap_query_request OPTIONAL
      EXPORTING
        et_pms     TYPE zcl_ce_ps_cats_project_manager=>tt_pm
        ev_count   TYPE i
      RAISING
        cx_rap_query_provider.

  PROTECTED SECTION.
  PRIVATE SECTION.
    CLASS-DATA: go_instance     TYPE REF TO zcl_ps_cats_project_manager.
ENDCLASS.



CLASS ZCL_PS_CATS_PROJECT_MANAGER IMPLEMENTATION.


  METHOD get_instance.

    go_instance = COND #( WHEN go_instance IS BOUND THEN go_instance ELSE NEW #( ) ).
    ro_instance = go_instance.


  ENDMETHOD.


  METHOD get_project_managers.

    DATA: lr_name_range     TYPE RANGE OF zxa_employee_number,
          lr_name_range_tab LIKE TABLE OF lr_name_range.


    TRY.
        DATA(lo_instance) = zcl_xa_sys_helper=>get_instance(  ).

        " Get the ECC on-premise destination
        DATA(lv_destination_new)  = lo_instance->get_sap_onpremise_destination(  ).

        IF io_request IS BOUND.
          " Map the OData request parameters to the FM importing/table objects
          lo_instance->map_rap_io_request_params( EXPORTING io_request = io_request
                                                  IMPORTING es_pagination = DATA(ls_pagination)
                                                            et_filters = DATA(lt_filter)
                                                            et_parameters = DATA(lt_parameters)
                                                            et_requested_elements = DATA(lt_requested_elements)
                                                            et_sort = DATA(lt_sort)
                                                            ev_search_expression = DATA(lv_search_expression) ).
        ENDIF.


        "Read filters
        LOOP AT lt_filter ASSIGNING FIELD-SYMBOL(<fs_filter>).
          LOOP AT <fs_filter>-single_select ASSIGNING FIELD-SYMBOL(<fs_single_select>).
            IF <fs_single_select>-range IS NOT INITIAL.
              CASE <fs_single_select>-name.
                WHEN 'PERSONNELNUMBER'.
                  DATA(lr_id_range) = <fs_single_select>-range.
                WHEN 'DISPLAYNAME'.
                  DATA(lr_name_range_untyped) = <fs_single_select>-range.

              ENDCASE.
            ENDIF.
          ENDLOOP.
*           Check if data already loaded:
          zcl_ps_cats_assignment_week=>get_instance( )->get_corresponding_tables(
            IMPORTING
              et_pm = DATA(lt_pms_temp)
          ).
          IF lt_pms_temp IS NOT INITIAL AND lr_id_range IS NOT INITIAL.
            DELETE lt_pms_temp WHERE
               PersonnelNumber NOT IN lr_id_range.
            IF lines( lt_pms_temp ) GE 0.
              APPEND LINES OF lt_pms_temp TO et_pms.
              CONTINUE.
            ENDIF.
          ENDIF.
        ENDLOOP.


*          PM name search
          IF lt_filter is not initial and lines( et_pms ) = 0.

            CALL FUNCTION 'Z_BE_PS_CATS_SEARCH_PMS' DESTINATION lv_destination_new
              EXPORTING
                iv_top                = ls_pagination-top
                iv_skip               = ls_pagination-skip
                it_filters            = lt_filter
              IMPORTING
                et_pms                = et_pms
                ev_count              = ev_count
              EXCEPTIONS
                system_failure        = 1
                communication_failure = 2
                OTHERS                = 99.

            CASE sy-subrc.
              WHEN 0.
*                Handle this above
                RETURN.
              WHEN 1.
                RAISE EXCEPTION TYPE zxa_sys_rap_provider_exception
                  EXPORTING
                    textid   = zxa_sys_rap_provider_exception=>rfc_sytem_failure
                    rfc_name = 'Z_BE_PS_CATS_SEARCH_PMS'.
              WHEN 2.
                RAISE EXCEPTION TYPE zxa_sys_rap_provider_exception
                  EXPORTING
                    textid   = zxa_sys_rap_provider_exception=>rfc_communication_failure
                    rfc_name = 'Z_BE_PS_CATS_SEARCH_PMS'.
              WHEN 99.
                RAISE EXCEPTION TYPE zxa_sys_rap_provider_exception
                  EXPORTING
                    textid   = zxa_sys_rap_provider_exception=>rfc_unknown_failure
                    rfc_name = 'Z_BE_PS_CATS_SEARCH_PMS'.
            ENDCASE.


            RETURN.
          ENDIF.


      CATCH cx_rfc_dest_provider_error INTO DATA(lx_dest).

        RAISE EXCEPTION TYPE zxa_sys_rap_provider_exception
          EXPORTING
            textid   = zxa_sys_rap_provider_exception=>destination_provider_error
            previous = lx_dest.

    ENDTRY.


  ENDMETHOD.
ENDCLASS.