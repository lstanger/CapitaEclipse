CLASS zcl_ps_cats_day_columns DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    TYPES: ts_day  TYPE zce_ps_cats_day,
           tt_days TYPE TABLE OF zce_ps_cats_day.

    CLASS-METHODS get_instance
      RETURNING VALUE(ro_instance) TYPE REF TO zcl_ps_cats_day_columns.

    METHODS:
      get_day_columns
        IMPORTING
          io_request TYPE REF TO if_rap_query_request OPTIONAL
        EXPORTING
          et_days    TYPE tt_days
          es_week    TYPE zce_ps_cats_week
        RAISING
          cx_rap_query_provider.

  PROTECTED SECTION.
  PRIVATE SECTION.
    CLASS-DATA: go_instance TYPE REF TO zcl_ps_cats_day_columns.
    DATA: gs_week TYPE zce_ps_cats_week,
          gt_days TYPE tt_days.
ENDCLASS.



CLASS ZCL_PS_CATS_DAY_COLUMNS IMPLEMENTATION.


  METHOD get_day_columns.

    DATA: lv_employeenumber TYPE zce_ps_cats_day-employeenumber,
          lv_WeekStartDate  TYPE zce_ps_cats_day-WeekStartDate,
          lv_2decNumber     TYPE p DECIMALS 2.

    TRY.
        DATA(lo_instance) = zcl_xa_sys_helper=>get_instance(  ).

        " Get the ECC on-premise destination
        DATA(lv_destination_new)  = lo_instance->get_sap_onpremise_destination(  ).

        IF io_request IS BOUND.
          " Map the OData request parameters to the FM importing/table objects
          lo_instance->map_rap_io_request_params( EXPORTING io_request = io_request
                                                  IMPORTING es_pagination = DATA(ls_pagination)
                                                            et_filters = DATA(lt_filter)
                                                            et_parameters = DATA(lt_parameters)
                                                            et_requested_elements = DATA(lt_requested_elements)
                                                            et_sort = DATA(lt_sort)
                                                            ev_search_expression = DATA(lv_search_expression) ).
        ENDIF.

        "Read filters
        LOOP AT lt_filter ASSIGNING FIELD-SYMBOL(<fs_filter>).
          LOOP AT <fs_filter>-single_select ASSIGNING FIELD-SYMBOL(<fs_single_select>).
            IF <fs_single_select>-range IS NOT INITIAL.
              CASE <fs_single_select>-name.
                WHEN 'EMPLOYEENUMBER'.
                  lv_employeenumber = <fs_single_select>-range[ 1 ]-low.
                WHEN 'WEEKSTARTDATE'.
                  lv_WeekStartDate = <fs_single_select>-range[ 1 ]-low.
                WHEN 'STARTDATE'.
                  lv_WeekStartDate = <fs_single_select>-range[ 1 ]-low.
              ENDCASE.
            ENDIF.
          ENDLOOP.
        ENDLOOP.
        IF io_request->is_data_requested( ).

          IF gt_days IS NOT INITIAL AND gs_week IS NOT INITIAL.
            es_week = gs_week.
            et_days = gt_days.
            RETURN.
          ENDIF.

          DATA(lv_show2decs) = zcl_xa_user_parameters_helper=>get_instance(  )->get_parameter(
              zif_xa_user_parameters=>timesheetshow2decs ).
          DATA: lv_show2decs_bool TYPE ABAP_BOOLEAN ."flag.
          IF ( lv_show2decs EQ 'true' ).
            lv_show2decs_bool = abap_true.
          ENDIF.


          CALL FUNCTION 'Z_BE_PS_CATS_GET_DAY_COLUMNS' DESTINATION lv_destination_new
            EXPORTING
              iv_startdate          = lv_weekstartdate
              iv_employeenumber     = lv_employeenumber
              iv_show2decs          = lv_show2decs_bool
            IMPORTING
              et_day_columns        = gt_days
              es_week               = gs_week
            EXCEPTIONS
              system_failure        = 1
              communication_failure = 2
              OTHERS                = 99.

          CASE sy-subrc.
            WHEN 0.
              es_week = gs_week.
              et_days = gt_days.
            WHEN 1.
              RAISE EXCEPTION TYPE zxa_sys_rap_provider_exception
                EXPORTING
                  textid   = zxa_sys_rap_provider_exception=>rfc_sytem_failure
                  rfc_name = 'Z_BE_PS_CATS_GET_DAY_COLUMNS'.
            WHEN 2.
              RAISE EXCEPTION TYPE zxa_sys_rap_provider_exception
                EXPORTING
                  textid   = zxa_sys_rap_provider_exception=>rfc_communication_failure
                  rfc_name = 'Z_BE_PS_CATS_GET_DAY_COLUMNS'.
            WHEN 99.
              RAISE EXCEPTION TYPE zxa_sys_rap_provider_exception
                EXPORTING
                  textid   = zxa_sys_rap_provider_exception=>rfc_unknown_failure
                  rfc_name = 'Z_BE_PS_CATS_GET_DAY_COLUMNS'.
          ENDCASE.
        ENDIF.

      CATCH cx_rfc_dest_provider_error INTO DATA(lx_dest).

        RAISE EXCEPTION TYPE zxa_sys_rap_provider_exception
          EXPORTING
            textid   = zxa_sys_rap_provider_exception=>destination_provider_error
            previous = lx_dest.

    ENDTRY.

  ENDMETHOD.


  METHOD get_instance.

    go_instance = COND #( WHEN go_instance IS BOUND THEN go_instance ELSE NEW #( ) ).
    ro_instance = go_instance.


  ENDMETHOD.
ENDCLASS.